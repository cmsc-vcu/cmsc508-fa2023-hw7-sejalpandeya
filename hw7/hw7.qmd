---
title: Homework 7 - Creating a resume database
author: Sejal Pandeya
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---
In this document is a database which uses a sql dagabase. The document has python code based off connecting the database and has a crowfoot diagram to show the structure of the database.

(Please clean up any comments that I included.  This is a scaffold document.)

GITHUB URL: https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-sejalpandeya.git

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project uses python coding for the database by sql. It connects the databse, queries and has manipulation of data based off python. There are entities and attributes such as the entities being customer,delivery adress and order. The project also has examples based off people,roles,and skills.

## Crows-foot diagram

The diagram is a crow food er diagram about a person and their roles/ skills. Within the entities there are attributes which will describe the person.

```{mermaid}
%%| echo: false
erDiagram
    Skills ||--o{ peopleskills : has
    people ||--o{ peopleskills : has
    peopleskills ||--o{ skills : has
    roles ||--o{ people_roles : has
    people_roles ||--o{ roles : has
    skills {
        int id
        VARCHAR name
        VARCHAR description
        VARCHAR tag
        VARCHAR url
        int time_commitment
    }
    people {
        int id  
        VARCHAR first_name 
        VARCHAR last_name 
        VARCHAR email 
        VARCHAR linkedin_url 
        VARCHAR headshot_url 
        VARCHAR discord_handle 
        VARCHAR brief_bio 
        DATE date_joined 
    }
    peopleskills {
        int id
        int skills_id
        int people_id
        DATE date_acquired
    }

    roles {
        int id
        VARCHAR name
        int sort_priority
    }

    people_roles {
        int id
        int people_id
        int role_id
        DATE date_role_acquired 
    }
```




## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe information about the person such as their name and about their profile.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe a list of skills the person has and the description.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles names of an id.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx) 
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name


### List skill names of Person 1


### List people names with Skill 6


### List people with a DEVELOPER role


### List names and email addresses of people without skills


### List names and tags of unused skills


### List people names and skill names with the BOSS role


### List ids and names of unused roles


## Reflection


I thought the hardest part about this project was getting the list in the last part of the project because when I was trying to type my code it kept on printing the code into quarto instead of showing the list. I believe the sql part was easy because I followed the lectures and tried the others that were not done fully in the lectures. Overall I believe this assignment went well.

